/*
   Logfile Parser (Lab 10)
   Created by Chase Geigle for CS225, Spring 2011
*/

#include "logfile_parser.h"

#include <iostream>

// creates a LogLine from the given line---you can ignore this.
LogfileParser::LogLine::LogLine( string line ) {
    istringstream iss( line );
    iss >> customer;
    customer = customer.substr(1, customer.length()-3);
    iss >> url;
    string dte = "";
    string dline;
    do {
        iss >> dline;
        dte += dline;
    } while( iss );

    date = time(NULL);
    tm * tme = localtime( &date );
    strptime( dte.c_str(), "%c", tme );
    date = mktime( tme );
}

LogfileParser::LogfileParser( string fname ) : whenVisitedTable(256, hasher) {
    SCHashTable< string, time_t > pageVisitedTable(256, hasher);
    ifstream infile( fname.c_str() );
    string line;
    while( infile.good() ) {
        getline( infile, line );
        
        // if the line's length is 0, move to the next loop iteration
        if( line.length() == 0 )
            continue;

        LogLine ll( line );
        // given the LogLine above, update the member variable hash table and
        // any other hash tables necessary to solve this problem. this should
        // also build the uniqueURLs vector.
	bool exist = false;
	for(int i=0; i<uniqueURLs.size(); i++)
		if(uniqueURLs[i].compare(ll.url) == 0)
			exist = true;
	if(!exist)
		uniqueURLs.push_back(ll.url);
	string nameAndUrl = ll.customer;
	nameAndUrl.append(ll.url);
	pageVisitedTable.insert(nameAndUrl, ll.date);
    }
	vector< pair<string, time_t> > holder = pageVisitedTable.vectorize();
	while(!holder.empty()){
		pair<string, time_t> temp = holder.back();
		holder.pop_back();
		for(int i=0; i<holder.size(); i++){
			if(temp.first.compare(holder[i].first) == 0){
				if(temp.second < holder[i].second)
					temp.second = holder[i].second;
//				holder.erase(holder.begin()+i);
				holder[i].first = "wocaonima";
			}
		}
		whenVisitedTable.insert(temp.first,temp.second);
	}
}

pair< bool, time_t > LogfileParser::dateVisited( string customer, string url ) {
    pair< bool, time_t > ret;
	ret.first = false;
	string nameAndUrl = customer;
	nameAndUrl.append(url);
/*	LPHashTable<string, time_t> visit(whenVisitedTable);
	time_t temp = visit.find(url);
	while(temp != time_t()){
		ret.first = true;
		visit.remove(url);
		if(temp < visit.find(url)){
			temp = visit.find(url);
			ret.second = temp;
		}
	}*/
//	ret.first = true;
    // your code here! query your hash table for this function---should be short
	if(whenVisitedTable.find(nameAndUrl)!=time_t()){
//std::cout << customer.append(url) << std::endl;
		ret.first = true;
		ret.second = whenVisitedTable.find(customer.append(url));
	}
    return ret;
}

vector<string> LogfileParser::uniquePages() {
//	SCHashTable< string, bool > pageVisitedTable(256, hasher);
//	vector<string, time_
    return uniqueURLs;
}
