#include <iostream>
using namespace std;



template<class T>
void Queue<T>::enqueue(T const & newItem)
{
   
   inStack.push(newItem);

 
}


template<class T>
 T Queue<T>::dequeue()
{

   if(isEmpty()) return NULL;
   while(!inStack.isEmpty())
 {
	outStack.push(inStack.pop());
   }
 T x= outStack.pop();
 return x;
  

}



template<class T>
 T Queue<T>::peek()
{
	if(isEmpty()) return NULL;
   while(!inStack.isEmpty())
 {
	outStack.push(inStack.pop());
   }
 return outStack.peek();
}



template<class T>
bool Queue<T>::isEmpty() const
{
 if(inStack.isEmpty() && outStack.isEmpty()) return true;
 else return false;
}
