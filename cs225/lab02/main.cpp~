#include "EasyBMP.h"
#include<iostream>
#include <algorithm>
using namespace std;

// sets up the output image//

void setupOutput(BMP* & image, int w, int h);

// Returns my favorite color
RGBApixel * myFavoriteColor(int intensity);

int main()
{

	// Load in.bmp
	BMP * original;
	original->readFromFile("in.bmp");
cout << "line " << __LINE__ << ": Got here!" << endl;

   
	int width  = original->tellWidth();
	int height = original->tellHeight();

cout << "line " << __LINE__ << ": Got here!" << endl;


	// Create out.bmp
	BMP * output;
    
	setupOutput(output, width, height) ;

	// Loud our favorite color to color the outline
	RGBApixel * myPixel = myFavoriteColor(192);

	// Go over the whole image, and if a pixel differs from that to its upper
	// left, color it my favorite color in the output
	for (int y = 1; y < height; y++)
	{
		for (int x = 1; x < width; x++)
		{
			// Calculate the pixel difference
			RGBApixel * prev = (*original)(x-1, y-1);
			RGBApixel * curr = (*original)(x  , y  );
			int diff = (curr->Red   - prev->Red  ) +
					   (curr->Green - prev->Green) +
					   (curr->Blue  - prev->Blue );

			// If the pixel is an edge pixel,
			// color the output pixel with my favorite color
			RGBApixel * currOutPixel = (*output)(x,y);
			if (diff > 100)
				 * currOutPixel =  * myPixel;
		}
	}
	
	// Save the output file
	output->writeToFile("out.bmp");

	// Clean up memory

	delete output;
	delete original;
}


// sets up the output image
void setupOutput(BMP* &image, int w, int h)
{
	image = new BMP;
	image->setSize(w, h);
}


// Returns my favorite color
RGBApixel * myFavoriteColor(int intensity)
{
	RGBApixel *color;
	color->Red   = 0;
	color->Green = intensity/2;
	color->Blue  = intensity;
	return color;
}

