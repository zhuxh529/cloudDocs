% p1 exe
%including data I/O and plots

	testX=0.9*rand(100,1)+0.1;
	testY=1./testX;
	testX=2.*testX.-1.1;
	testY=testY.*2/9-11/9;
	testX=[ones(size(testX)(1),1) testX];


	xx=0.9*rand(200,1)+0.1;
	DD=1./xx;
	x=2.*xx.-1.1;
	D=DD.*2/9-11/9;

	paras=[0.8, 0.05,1, 200];

 	[w,v,test, train]=BPlearn(50000, 10, x,D,testX, testY, paras);
 	figure;
 	hold on;
 	plot(train*4.5); % scaling back to real abs err by muliplying 4.5
 	plot(test*4.5, 'r');  % scaling back to real abs err by muliplying 4.5
 	legend('train err','test err');
 	title('P1, best result no1, real absoulte error');
 	xlabel('x 200 steps');
	ylabel('y (real number)');

 	hold off;

 	%[err1, out]=BPrecall(w,v, 10, D, x, paras);
 	%plot(out)

 	pause;
 	disp("press enter to continue");

 	paras=[0.8, 0.05,1, 200];

 	[w,v,test, train]=BPlearn(50000, 15, x,D,testX, testY, paras);
 	figure;
 	hold on;
 	plot(train*4.5); % scaling back to real abs err by muliplying 4.5
 	plot(test*4.5, 'r');  % scaling back to real abs err by muliplying 4.5
 	legend('train err','test err');
 	title('P1, best result no1, real absoulte error');
 	xlabel('x 200 steps');
	ylabel('y (real number)');

 	hold off;

 	
 	paras=[0.8, 0.07,1, 200];

 	[w,v,test, train]=BPlearn(50000, 10, x,D,testX, testY, paras);
 	figure;
 	hold on;
 	plot(train*4.5); % scaling back to real abs err by muliplying 4.5
 	plot(test*4.5, 'r');  % scaling back to real abs err by muliplying 4.5
 	legend('train err','test err');
 	title('P1, best result no3, real absoulte error');
 	xlabel('x 200 steps');
	ylabel('y (real number)');

 	hold off;









%p2 exe
%including data I/O and plots

test=dlmread('test.txt');
testx=test(:,1:4);
testy=test(:, 5:7);
testy(testy==0)=-1;


aa=dlmread('irisdata3.txt');
y=aa(:,1:3);
x=aa(:,4:7);

	maxi=repmat(max(x), [size(x)(1),1]);
	mini=repmat(min(x), [size(x)(1),1]);
	x= (x-mini).*2 ./(maxi-mini) -1;

	maxi=repmat(max(testx), [size(testx)(1),1]);
	mini=repmat(min(testx), [size(testx)(1),1]);
	testx= (testx-mini).*2 ./(maxi-mini) -1;
testx=[ones(size(testx)(1),1) testx];

	paras=[0.9, 0.05,1, 200];


 	[w,v,test, train]=BPlearn(200000, 10, x,y,testx, testy, paras);
	figure;
 	hold on;
 	plot(train); % scaling back to real abs err by muliplying 4.5
 	plot(test, 'r');  % scaling back to real abs err by muliplying 4.5
 	legend('train err','test err');
 	title('P2, error');
 	xlabel('x 200 steps');
	ylabel('y (real number)');

 	hold off;




% function to get recall, error rate


function [err, out]=BPrecall(w,v, s2, D, train, paras)
	alpha=paras(1); % momentum term constant
	rate=paras(2); % learning rate
	slope=paras(3); % tanh slope
	epoch=paras(4); 

	x=train;
	s1=size(x)(2)+1;
	s3=size(D)(2);

	%	x=[ones(size(x)(1),1) x];

	out=[];

for no=1:size(x)(1)
	%no=randi(size(x)(1));
	input =x(no, :);
	y1=input*w;
	y1=tanh(slope*y1);
	y1=[1 y1];
	y2=tanh(slope*y1*v);
	out=[out; y2];
end
	err=zeros(1,size(D)(2));
for i=1:size(out)(2)
	err=err+abs(out(i,:)-D(i,:));
end
	err=sum(err,2)/size(D)(1);

end





%main function BPlearn

function [w1,v1, testOut, trainOut]=BPlearn(n,s2,x,D, testX, testY, paras)
	testOut=[];
	trainOut=[];


	alpha=paras(1); % momentum term constant
	rate=paras(2); % learning rate
	slope=paras(3); % tanh slope
	epoch=paras(4); 

	m=5000;

	s1=size(x)(2)+1;
	s3=size(D)(2);

	x=[ones(size(x)(1),1) x];

	w=initWeights(s1,s2-1,0.01)
	v=initWeights(s2,s3,0.01)

	dw_prev=zeros(s1,s2-1);
	dv_prev=zeros(s2,s3);


for i=1:n

	no=randi(size(x)(1));
	input =x(no, :);
	y1=input*w;
	y1=tanh(slope*y1);
	y1=[1 y1];
	y2=tanh(slope*y1*v);
	%size(y1)
	err2=(D(no,:) -y2).*(1-y2.^2);
	err1=v(2:s2,:)*err2'.*(1-y1(2:s2)'.^2);

	dv=rate*y1'*err2+ dv_prev.*alpha;
	dv_prev=dv;

	dw=rate*repmat(x(no,:)', [1,s2-1]).*repmat(err1',[s1,1]) + dw_prev.*alpha;
	dw_prev=dw;

	if rem(i,epoch)==0
		w=w+dw;
		v=v+dv;
		wtemp=w;
		vtemp=v;
		err_train=BPrecall(wtemp,vtemp,10,D,x,[0.8,0.05,1,200]);
		%disp(err_train);
		err_test=BPrecall(wtemp,vtemp,10,testY,testX,[0.8,0.05,1,200]);
		%str=[num2str(err_train) '       ' num2str(err_test)];
		%disp(str);
		testOut=[testOut err_test];
		trainOut=[trainOut err_train];


	end

	if rem(i,m)==0
		str = [ num2str(i) '       ' num2str(input) '       ' num2str(D(no,:)) '       ' num2str(y2) '       ' num2str(D(no,:)-y2)]; 
		disp(str);
		
	end


end
	w1=w;
	v1=v;


end






%function to initialize weights and vs


function weight=initWeights(row, col, limit)
	weight=(unidrnd(20, [row,col])-10)*limit;
	r=randi(10);
	if r>5
		weight(weight==0)=limit*0.5;
	else 
		weight(weight==0)=-limit*0.5;
	end
end




