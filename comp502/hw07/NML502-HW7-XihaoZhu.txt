P1.
X = rand(2,4000);
[a,w]=som(X', 8, 20000);


P2.
X1 = sqrt(0.1)*randn(2,1000);
X1=detrend(X1')';
X1(1,:)=X1(1,:) + 7*ones(1,1000);
X1(2,:)=X1(2,:) + 7*ones(1,1000);


X2 = sqrt(0.1)*randn(2,1000);
X2=detrend(X2')';
X2(2,:)=X2(2,:) + 7*ones(1,1000);


X3 = sqrt(0.1)*randn(2,1000);
X3=detrend(X3')';
X3(1,:)=X3(1,:) + 7*ones(1,1000);


X4 = sqrt(0.1)*randn(2,1000);
X4=detrend(X4')';
x=[X1 X2 X3 X4];
[a,w]=som(x', 8, 20000);



function [w]  = som(x, n, tmax)

MU_I        = 0.05;         
MU_F        = 0.005;         
SIGMA_I     =  3.0e0;     
SIGMA_F     =  1.0e-1;     
% seed random-number generator if specified
if nargin > 7
    rand('state', seed)
end

[o(:,1), o(:,2)] = ind2sub([n n], 1:n^2);

w = rand(n^2, size(x,2));

% run SOM learning for specified number of steps
for t = 1:tmax
    w = somlearn(w, o, x, MU_I, MU_F, SIGMA_I, SIGMA_F, t, tmax);
	%if t==1| t==10 | t==30 |t==50 | t==100 | t==200| t==500| t==2000|t==5000| t==10000
	if t==tmax
	figure;
	plot_nodes(w);
	%plot_points(x);
	title(['iteration at step ',num2str(t)]);
	end
end


function w = somlearn(w, u, x, mu_i, mu_f, sigma_i, sigma_f, t, tmax)
x_pick = pickrand(x);
i = index_of_closest(x_pick, w);
w = update_weights(w, u, x_pick, i, t, tmax, mu_i, mu_f, sigma_i, sigma_f);
end



function w = update_weights(w, u, x_pick, i, t, tmax, ...
                            mu_i, mu_f, sigma_i, sigma_f)
                    
tfrac = t / tmax;
mu = scale(mu_i, mu_f, tfrac);
sigma = scale(sigma_i, sigma_f, tfrac);

for k = 1:size(w, 1)
    aleph = exp(-sum((u(i,:)-u(k,:)).^2) / (2*sigma^2));
    dw = mu * aleph * (x_pick - w(k,:));
    w(k,:) = w(k,:) + dw; 
end











